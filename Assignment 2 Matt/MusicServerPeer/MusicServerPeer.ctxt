#BlueJ class context
comment0.params=
comment0.target=MusicServerPeer()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ MusicServerPeer\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=
comment10.target=void\ updateSongList()
comment10.text=\r\n\ updateSongList\ -\ \ \ \ \ sets\ the\ songs\ array\ list\ equal\ to\ the\ get\ songs\ from\ file\ method\r\n\ \r\n
comment11.params=
comment11.target=void\ requestSongList()
comment11.text=\r\n\ requestSongList\ -\ \ \ \ requests\ the\ list\ of\ songs\ the\ server\ knows\ about\r\n\ \r\n
comment12.params=
comment12.target=void\ requestSong()
comment12.text=\r\n\ requestSong\ -\ \ \ \ requests\ a\ song\ from\ a\ peer\r\n\ \r\n
comment13.params=ip\ songRequested
comment13.target=void\ TCPRequestSong(java.lang.String,\ java.lang.String)
comment13.text=\r\n\ TCPRequestSong\ -\ \ \ \ \ creates\ a\ TCP\ connection\ with\ a\ peer\ and\ exchanges\ messages\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ receive\ a\ song\ file\ which\ was\ requested\r\n\ \r\n\ @param\ -\ \ \ \ \ \ \ \ \ \ \ \ \ String\ ip\ -\ the\ ip\ of\ the\ peer\ which\ the\ songs\ will\ be\ transfered\ from\r\n\ @param\ -\ \ \ \ \ \ \ \ \ \ \ \ \ String\ songRequested\ -\ the\ song\ requested\r\n
comment14.params=
comment14.target=void\ playSong()
comment14.text=\r\n\ playSong\ -\ \ \ plays\ the\ song\ selected\ by\ the\ user\r\n\ \r\n
comment2.params=
comment2.target=void\ register()
comment2.text=\r\n\ Register\ -\ \ \ notifies\ the\ music\ server\ that\ the\ peer\ is\ online;\ aswell\ as\ sending\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ song\ list\ with\ it\r\n\ \r\n
comment3.params=
comment3.target=java.lang.String\ selectSong()
comment3.text=\r\n\ selectSong\ -\ \ \ \ \ receive\ input\ from\ the\ user\ asking\ for\ a\ song\ to\ be\ requested\r\n\ \r\n\ @return\ -\ \ \ \ \ \ \ \ String\ input\ -\ the\ input\ from\ the\ user\ entered\ via\ System.in\r\n
comment4.params=song
comment4.target=java.lang.String\ requestPeersWithSong(java.lang.String)
comment4.text=\r\n\ requestPeersWithSong\ -\ \ \ asks\ the\ server\ what\ peers\ have\ the\ a\ specific\ song\r\n\ \r\n\ @param\ -\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ song\ -\ song\ to\ be\ sent\r\n\ @return\ -\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ ips\ -\ all\ the\ peers\ ip\ who\ have\ the\ song\ \r\n
comment5.params=
comment5.target=void\ notifyUpdateSongList()
comment5.text=\r\n\ notifyUpdateSongList\ -\ \ \ notifies\ the\ server\ the\ peer\ has\ updated\ its\ song\ list\r\n\ \r\n
comment6.params=
comment6.target=void\ menu()
comment6.text=\r\n\ menu\ -\ \ \ The\ user\ menu\ which\ allows\ the\ user\ to\ execute\ several\ functions\r\n\ \ \ \ \ \ \ \ \ \ of\ the\ program\r\n\ \r\n
comment7.params=
comment7.target=void\ exit()
comment7.text=\r\n\ exit\ -\ \ \ ends\ the\ program\r\n\ \r\n
comment8.params=
comment8.target=java.util.ArrayList\ getSongsFromFile()
comment8.text=\r\n\ getSongsFromFile\ -\ \ \ gets\ all\ the\ mp3\ files\ in\ the\ song\ directory\r\n\ \r\n\ @return\ -\ \ \ \ \ \ \ \ \ \ \ \ ArrayList<String>\ -\ a\ string\ list\ of\ all\ the\ songs\ in\ the\ songs\ directory\r\n
comment9.params=
comment9.target=void\ addOrRemoveSong()
comment9.text=\r\n\ addOrRemoveSong\ -\ \ \ \ prompts\ the\ user\ to\ move\ a\ song\ into\ or\ out\ of\ the\ songs\ directory\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ then\ notifies\ the\ server\ that\ its\ song\ list\ has\ been\ updated\r\n\ \r\n
numComments=15
