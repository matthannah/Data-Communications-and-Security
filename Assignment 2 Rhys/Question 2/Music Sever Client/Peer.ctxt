#BlueJ class context
comment0.params=
comment0.target=Peer()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Peer.\ The\ constructor\ sets\ the\ file\ name,\ sets\ the\ default\r\n\ connection\ status\ to\ offline,\ and\ initialises\ the\ array\ list\ of\ songs,\ before\ updating\ the\r\n\ list\ from\ file.\r\n\ \r\n\ @param\ \ \ \ \ \ \ fileName\ \ \ \ Name\ of\ the\ file\ which\ holds,\ or\ will\ hold\ that\ peer's\ song\ list\r\n\ @return\ \ \ \ \ \ Peer\ \r\n
comment1.params=
comment1.target=void\ updateSongs()
comment1.text=\r\n\ Method\ to\ update\ the\ list\ of\ songs\ the\ peer\ has\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ String\ \ \ \ \ Either\ the\ name\ found\ from\ the\ file\ or\ a\ message\ that\ a\ name\ is\ needed\r\n
comment10.params=
comment10.target=java.lang.String\ getAddress()
comment10.text=\r\n\ Method\ to\ get\ the\ server\ address\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ String\ \ \ \ \ \ The\ address\ of\ the\ peer\r\n
comment11.params=
comment11.target=java.lang.String\ getSongList()
comment11.text=\r\n\ Method\ to\ get\ the\ String\ containing\ all\ of\ the\ peers\ songs\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ String\ \ \ \ \ \ All\ the\ peers\ songs\ seperated\ by\ "-"\r\n
comment12.params=message
comment12.target=void\ sendMessage(java.lang.String)
comment12.text=\r\n\ Attempt\ to\ send\ a\ message\ to\ the\ server\r\n\ \r\n\ @param\ \ \ \ \ \ \ message\ \ \ \ \ The\ string\ message\ that\ is\ to\ be\ sent\ to\ the\ server\r\n\ @return\ \ \ \ \ \ void\r\n
comment13.params=
comment13.target=java.lang.Boolean\ requestingSong()
comment13.text=\r\n\ Returns\ the\ status\ of\ the\ requesting\ song\ flag.\ This\ lets\ the\ system\ know\ that\ the\ peer\ is\ requesting\ a\ song\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ Boolean\ \ \ \ \ Whether\ or\ not\ the\ peer\ is\ requesting\ a\ song\r\n
comment14.params=request
comment14.target=void\ setRequestingSong(java.lang.Boolean)
comment14.text=\r\n\ Sets\ the\ status\ of\ the\ requesting\ song\ flag.\ This\ lets\ the\ system\ know\ that\ the\ peer\ is\ requesting\ a\ song\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ Boolean\ \ \ \ \ Whether\ or\ not\ the\ peer\ is\ requesting\ a\ song\r\n
comment15.params=ip\ songRequested
comment15.target=void\ TCPRequestSong(java.lang.String,\ java.lang.String)
comment15.text=\r\n\ TCPRequestSong\ creates\ a\ TCP\ connection\ with\ a\ peer\ and\ exchanges\ message\ to\ receive\ a\ song\ file\ which\ was\ requested\r\n\ \r\n\ @param\ \ \ \ \ ip\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ ip\ of\ the\ peer\ which\ the\ songs\ will\ be\ transfered\ from\r\n\ @param\ \ \ \ \ songRequested\ \ \ \ the\ song\ requested\r\n\ @return\ \ \ \ void\r\n
comment16.params=
comment16.target=void\ TCPGoodBye()
comment16.text=\r\n\ In\ TCPGoodbye\ the\ peer\ creates\ a\ TCP\ message\ to\ itslef\ which\ the\ listener\ will\ process\ so\ that\ it\r\n\ can\ finish\ it's\ final\ interation\ of\ it's\ while\ loop.\ This\ function\ is\ called\ when\ a\ peer\ wants\ to\ \r\n\ exit\ the\ program\r\n\ \r\n\ @param\ \ \ \ \ void\r\n\ @return\ \ \ \ void\r\n
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment17.text=\r\n\ Controls\ the\ console\ interactions\ with\ the\ user\r\n\ \r\n\ @param\ \ \ \ \ \ \ args\ \ \ \ An\ array\ of\ strings.\ The\ first\ of\ these\ is\ all\ thats\ used\ and\ is\ the\ server\ IP\r\n\ @return\ \ \ \ \ \ void\r\n
comment2.params=
comment2.target=java.lang.String\ findName()
comment2.text=\r\n\ Method\ to\ find\ the\ name\ of\ the\ peer\ or\ set\ it\ equal\ to\ unnamed\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ String\ \ \ \ \ Either\ the\ name\ found\ from\ the\ file\ or\ a\ message\ that\ a\ name\ is\ needed\r\n
comment3.params=
comment3.target=java.lang.String\ getName()
comment3.text=\r\n\ Method\ to\ get\ the\ name\ of\ the\ peer\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ String\ \ \ \ \ \ listFileName\r\n
comment4.params=name
comment4.target=void\ setName(java.lang.String)
comment4.text=\r\n\ Method\ to\ set\ the\ name\ of\ the\ peer\ and\ attempt\ to\ write\ it\ to\ file\r\n\ \r\n\ @param\ \ \ \ \ \ \ name\ \ \ \ \ \ \ \ The\ name\ that\ is\ to\ be\ used\ as\ the\ peers\ name\r\n\ @return\ \ \ \ \ \ void\r\n
comment5.params=ol
comment5.target=void\ setOnline(java.lang.Boolean)
comment5.text=\r\n\ Method\ to\ set\ whether\ or\ not\ a\ peer\ is\ online\r\n\ \r\n\ @param\ \ \ \ \ \ \ ol\ \ \ \ \ \ Whether\ or\ not\ this\ peer\ is\ online\r\n\ @return\ \ \ \ \ \ void\r\n
comment6.params=add
comment6.target=void\ setAddress(java.lang.String)
comment6.text=\r\n\ Method\ to\ set\ the\ current\ address\ of\ the\ server\r\n\ \r\n\ @param\ \ \ \ \ \ \ add\ \ \ \ \ \ The\ address\ of\ the\ peer\r\n\ @return\ \ \ \ \ \ void\r\n
comment7.params=
comment7.target=java.lang.Boolean\ getOnline()
comment7.text=\r\n\ Method\ to\ get\ whether\ or\ not\ a\ peer\ is\ online\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ Boolean\ \ \ \ Whether\ or\ not\ this\ peer\ is\ online\r\n
comment8.params=
comment8.target=java.lang.Boolean\ listen()
comment8.text=\r\n\ Method\ tells\ the\ listener\ whether\ or\ not\ to\ keep\ listening\r\n\ \r\n\ @param\ \ \ \ \ \ \ void\r\n\ @return\ \ \ \ \ \ Boolean\ \ \ \ Whether\ or\ not\ to\ keep\ listening\r\n
comment9.params=keepListening
comment9.target=void\ setListen(java.lang.Boolean)
comment9.text=\r\n\ Sets\ the\ listen\ variable.\ Used\ to\ tell\ listener\ threads\ that\ they\ can\ stop\ listening.\ Needed\ to\ exit\r\n\ \r\n\ @param\ \ \ \ \ \ \ keepListening\r\n\ @return\ \ \ \ \ \ Boolean\ \ \ \ Whether\ or\ not\ to\ keep\ listening\r\n
numComments=18
